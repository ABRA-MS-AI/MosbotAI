{"version":3,"file":"Ask-CJUppDck.js","sources":["../../../frontend/src/pages/ask/Ask.tsx"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Panel, DefaultButton, Spinner } from \"@fluentui/react\";\n\nimport styles from \"./Ask.module.css\";\n\nimport { askApi, configApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFields, GPT4VInput, SpeechConfig } from \"../../api\";\nimport { Answer, AnswerError } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\nimport { UploadFile } from \"../../components/UploadFile\";\nimport { Settings } from \"../../components/Settings/Settings\";\nimport { useMsal } from \"@azure/msal-react\";\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\nimport { LoginContext } from \"../../loginContext\";\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\n\nexport function Component(): JSX.Element {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [seed, setSeed] = useState<number | null>(null);\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [maxSubqueryCount, setMaxSubqueryCount] = useState<number>(10);\n    const [resultsMergeStrategy, setResultsMergeStrategy] = useState<string>(\"interleaved\");\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [useQueryRewriting, setUseQueryRewriting] = useState<boolean>(false);\n    const [reasoningEffort, setReasoningEffort] = useState<string>(\"\");\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\n    const [includeCategory, setIncludeCategory] = useState<string>(\"\");\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [question, setQuestion] = useState<string>(\"\");\n    const [vectorFields, setVectorFields] = useState<VectorFields>(VectorFields.TextAndImageEmbeddings);\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\n    const [showQueryRewritingOption, setShowQueryRewritingOption] = useState<boolean>(false);\n    const [showReasoningEffortOption, setShowReasoningEffortOption] = useState<boolean>(false);\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\n    const audio = useRef(new Audio()).current;\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [showAgenticRetrievalOption, setShowAgenticRetrievalOption] = useState<boolean>(false);\n    const [useAgenticRetrieval, setUseAgenticRetrieval] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n    const [answer, setAnswer] = useState<ChatAppResponse>();\n    // For the Ask tab, this array will hold a maximum of one URL\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\n\n    const speechConfig: SpeechConfig = {\n        speechUrls,\n        setSpeechUrls,\n        audio,\n        isPlaying,\n        setIsPlaying\n    };\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const client = useLogin ? useMsal().instance : undefined;\n    const { loggedIn } = useContext(LoginContext);\n\n    const getConfig = async () => {\n        configApi().then(config => {\n            setShowGPT4VOptions(config.showGPT4VOptions);\n            setUseSemanticRanker(config.showSemanticRankerOption);\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\n            setUseQueryRewriting(config.showQueryRewritingOption);\n            setShowQueryRewritingOption(config.showQueryRewritingOption);\n            setShowReasoningEffortOption(config.showReasoningEffortOption);\n            if (config.showReasoningEffortOption) {\n                setReasoningEffort(config.defaultReasoningEffort);\n            }\n            setShowVectorOption(config.showVectorOption);\n            if (!config.showVectorOption) {\n                setRetrievalMode(RetrievalMode.Text);\n            }\n            setShowUserUpload(config.showUserUpload);\n            setshowLanguagePicker(config.showLanguagePicker);\n            setShowSpeechInput(config.showSpeechInput);\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\n            setShowAgenticRetrievalOption(config.showAgenticRetrievalOption);\n            setUseAgenticRetrieval(config.showAgenticRetrievalOption);\n            if (config.showAgenticRetrievalOption) {\n                setRetrieveCount(10);\n            }\n        });\n    };\n\n    useEffect(() => {\n        getConfig();\n    }, []);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        const token = client ? await getToken(client) : undefined;\n\n        try {\n            const request: ChatAppRequest = {\n                messages: [\n                    {\n                        content: question,\n                        role: \"user\"\n                    }\n                ],\n                context: {\n                    overrides: {\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\n                        include_category: includeCategory.length === 0 ? undefined : includeCategory,\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\n                        top: retrieveCount,\n                        max_subqueries: maxSubqueryCount,\n                        results_merge_strategy: resultsMergeStrategy,\n                        temperature: temperature,\n                        minimum_reranker_score: minimumRerankerScore,\n                        minimum_search_score: minimumSearchScore,\n                        retrieval_mode: retrievalMode,\n                        semantic_ranker: useSemanticRanker,\n                        semantic_captions: useSemanticCaptions,\n                        query_rewriting: useQueryRewriting,\n                        reasoning_effort: reasoningEffort,\n                        use_oid_security_filter: useOidSecurityFilter,\n                        use_groups_security_filter: useGroupsSecurityFilter,\n                        vector_fields: vectorFields,\n                        use_gpt4v: useGPT4V,\n                        gpt4v_input: gpt4vInput,\n                        language: i18n.language,\n                        use_agentic_retrieval: useAgenticRetrieval,\n                        ...(seed !== null ? { seed: seed } : {})\n                    }\n                },\n                // AI Chat Protocol: Client must pass on any session state received from the server\n                session_state: answer ? answer.session_state : null\n            };\n            const result = await askApi(request, token);\n            setAnswer(result);\n            setSpeechUrls([null]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleSettingsChange = (field: string, value: any) => {\n        switch (field) {\n            case \"promptTemplate\":\n                setPromptTemplate(value);\n                break;\n            case \"promptTemplatePrefix\":\n                setPromptTemplatePrefix(value);\n                break;\n            case \"promptTemplateSuffix\":\n                setPromptTemplateSuffix(value);\n                break;\n            case \"temperature\":\n                setTemperature(value);\n                break;\n            case \"seed\":\n                setSeed(value);\n                break;\n            case \"minimumRerankerScore\":\n                setMinimumRerankerScore(value);\n                break;\n            case \"minimumSearchScore\":\n                setMinimumSearchScore(value);\n                break;\n            case \"retrieveCount\":\n                setRetrieveCount(value);\n                break;\n            case \"maxSubqueryCount\":\n                setMaxSubqueryCount(value);\n                break;\n            case \"resultsMergeStrategy\":\n                setResultsMergeStrategy(value);\n                break;\n            case \"useSemanticRanker\":\n                setUseSemanticRanker(value);\n                break;\n            case \"useSemanticCaptions\":\n                setUseSemanticCaptions(value);\n                break;\n            case \"useQueryRewriting\":\n                setUseQueryRewriting(value);\n                break;\n            case \"reasoningEffort\":\n                setReasoningEffort(value);\n                break;\n            case \"excludeCategory\":\n                setExcludeCategory(value);\n                break;\n            case \"includeCategory\":\n                setIncludeCategory(value);\n                break;\n            case \"useOidSecurityFilter\":\n                setUseOidSecurityFilter(value);\n                break;\n            case \"useGroupsSecurityFilter\":\n                setUseGroupsSecurityFilter(value);\n                break;\n            case \"useGPT4V\":\n                setUseGPT4V(value);\n                break;\n            case \"gpt4vInput\":\n                setGPT4VInput(value);\n                break;\n            case \"vectorFields\":\n                setVectorFields(value);\n                break;\n            case \"retrievalMode\":\n                setRetrievalMode(value);\n                break;\n            case \"useAgenticRetrieval\":\n                setUseAgenticRetrieval(value);\n        }\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n        setQuestion(example);\n    };\n\n    const onShowCitation = (citation: string) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\n        if (activeAnalysisPanelTab === tab) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n    };\n\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseOidSecurityFilter(!!checked);\n    };\n\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseGroupsSecurityFilter(!!checked);\n    };\n\n    const { t, i18n } = useTranslation();\n\n    return (\n        <div className={styles.askContainer}>\n            {/* Setting the page title using react-helmet-async */}\n            <Helmet>\n                <title>{t(\"pageTitle\")}</title>\n            </Helmet>\n            <div className={styles.askTopSection}>\n                <div className={styles.commandsContainer}>\n                    {showUserUpload && <UploadFile className={styles.commandButton} disabled={!loggedIn} />}\n                    <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n                </div>\n                <h1 className={styles.askTitle}>{t(\"askTitle\")}</h1>\n                <div className={styles.askQuestionInput}>\n                    <QuestionInput\n                        placeholder={t(\"gpt4vExamples.placeholder\")}\n                        disabled={isLoading}\n                        initQuestion={question}\n                        onSend={question => makeApiRequest(question)}\n                        showSpeechInput={showSpeechInput}\n                    />\n                </div>\n            </div>\n            <div className={styles.askBottomSection}>\n                {isLoading && <Spinner label={t(\"generatingAnswer\")} />}\n                {!lastQuestionRef.current && (\n                    <div className={styles.askTopSection}>\n                        {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />}\n                        <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\n                    </div>\n                )}\n                {!isLoading && answer && !error && (\n                    <div className={styles.askAnswerContainer}>\n                        <Answer\n                            answer={answer}\n                            index={0}\n                            speechConfig={speechConfig}\n                            isStreaming={false}\n                            onCitationClicked={x => onShowCitation(x)}\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\n                            showSpeechOutputAzure={showSpeechOutputAzure}\n                            showSpeechOutputBrowser={showSpeechOutputBrowser}\n                        />\n                    </div>\n                )}\n                {error ? (\n                    <div className={styles.askAnswerContainer}>\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                    </div>\n                ) : null}\n                {activeAnalysisPanelTab && answer && (\n                    <AnalysisPanel\n                        className={styles.askAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x)}\n                        citationHeight=\"600px\"\n                        answer={answer}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n            </div>\n\n            <Panel\n                headerText={t(\"labels.headerText\")}\n                isOpen={isConfigPanelOpen}\n                isBlocking={false}\n                onDismiss={() => setIsConfigPanelOpen(false)}\n                closeButtonAriaLabel={t(\"labels.closeButton\")}\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>{t(\"labels.closeButton\")}</DefaultButton>}\n                isFooterAtBottom={true}\n            >\n                <Settings\n                    promptTemplate={promptTemplate}\n                    promptTemplatePrefix={promptTemplatePrefix}\n                    promptTemplateSuffix={promptTemplateSuffix}\n                    temperature={temperature}\n                    retrieveCount={retrieveCount}\n                    maxSubqueryCount={maxSubqueryCount}\n                    resultsMergeStrategy={resultsMergeStrategy}\n                    seed={seed}\n                    minimumSearchScore={minimumSearchScore}\n                    minimumRerankerScore={minimumRerankerScore}\n                    useSemanticRanker={useSemanticRanker}\n                    useSemanticCaptions={useSemanticCaptions}\n                    useQueryRewriting={useQueryRewriting}\n                    reasoningEffort={reasoningEffort}\n                    excludeCategory={excludeCategory}\n                    includeCategory={includeCategory}\n                    retrievalMode={retrievalMode}\n                    useGPT4V={useGPT4V}\n                    gpt4vInput={gpt4vInput}\n                    vectorFields={vectorFields}\n                    showSemanticRankerOption={showSemanticRankerOption}\n                    showQueryRewritingOption={showQueryRewritingOption}\n                    showReasoningEffortOption={showReasoningEffortOption}\n                    showGPT4VOptions={showGPT4VOptions}\n                    showVectorOption={showVectorOption}\n                    useOidSecurityFilter={useOidSecurityFilter}\n                    useGroupsSecurityFilter={useGroupsSecurityFilter}\n                    useLogin={!!useLogin}\n                    loggedIn={loggedIn}\n                    requireAccessControl={requireAccessControl}\n                    showAgenticRetrievalOption={showAgenticRetrievalOption}\n                    useAgenticRetrieval={useAgenticRetrieval}\n                    onChange={handleSettingsChange}\n                />\n                {useLogin && <TokenClaimsDisplay />}\n            </Panel>\n        </div>\n    );\n}\n\nComponent.displayName = \"Ask\";\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","maxSubqueryCount","setMaxSubqueryCount","resultsMergeStrategy","setResultsMergeStrategy","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useQueryRewriting","setUseQueryRewriting","reasoningEffort","setReasoningEffort","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","includeCategory","setIncludeCategory","excludeCategory","setExcludeCategory","question","setQuestion","vectorFields","setVectorFields","VectorFields","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showQueryRewritingOption","setShowQueryRewritingOption","showReasoningEffortOption","setShowReasoningEffortOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","showSpeechInput","setShowSpeechInput","showSpeechOutputBrowser","setShowSpeechOutputBrowser","showSpeechOutputAzure","setShowSpeechOutputAzure","audio","useRef","isPlaying","setIsPlaying","showAgenticRetrievalOption","setShowAgenticRetrievalOption","useAgenticRetrieval","setUseAgenticRetrieval","lastQuestionRef","isLoading","setIsLoading","error","setError","answer","setAnswer","speechUrls","setSpeechUrls","speechConfig","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useLogin","useMsal","loggedIn","useContext","LoginContext","getConfig","configApi","config","useEffect","makeApiRequest","token","getToken","request","i18n","result","askApi","e","handleSettingsChange","field","value","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","t","useTranslation","jsxs","styles","jsx","Helmet","UploadFile","SettingsButton","QuestionInput","Spinner","LanguagePicker","newLang","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","Settings","requireAccessControl","TokenClaimsDisplay"],"mappings":"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"}